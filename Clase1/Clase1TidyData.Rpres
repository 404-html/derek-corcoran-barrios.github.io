<style>
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
</style>

<style>
.small-code pre code {
  font-size: 1em;
}
</style>

Clase 1 Tidy Data y manipulación de datos
========================================================
author: Derek Corcoran
date: "`r format(Sys.time(), '%d/%m, %Y')`"
autosize: true
transition: rotate


Curso Análisis y manipulación de datos en R
========================================================

Primeros pasos

- ¿Quien no ha usado nunca R? [Swirl](http://swirlstats.com/students.html)
- Evaluación sencilla (Completar tareas + 1 evaluación)
- Mucho trabajo personal guiado
- Pagina donde esta [todo el curso](https://github.com/derek-corcoran-barrios/CursoR)

Estructura de datos
========================================================
incremental: true

- Vector: Un conjunto lineal de datos (secuencia génica, serie de tiempo)
- Matrix: Una tabla con solo números
- Data Frame: Una tabla donde cada columna tiene un tipo de datos (estándar dorado)
- List: Aqui podemos meter lo que queramos

***

![data](Data.png)

Vector
========================================================
left: 60%
incremental: true

* Secuencia lineal de datos
* Pueden ser de muchos tipos (numéricos, de carácteres, lógicos, etc.)
* Ejemplo data(uspop)
* para crear uno c(1,4,6,7,8)
* para subsetear un vector se pone el índice entre []
* uspop[4], uspop[2:10], uspop[c(3,5,8)]

***

![Vector](Vector.jpg)


Data Frame
========================================================
incremental: true
* Una tabla, cada columna un tipo de datos (Numérico, lógico, etc)
* Cada columna un vector
* Ejemplo data(iris)
* Para subsetear data.frame[filas,columnas]
* Ejemplos iris[,3], iris[,"Petal.Length"], iris[2:5,c(1,5)], iris$Petal.Length



***

![DataFrame](DataFrame.jpg)

Tidy Data 
========================================================
incremental: true
![Tidy](tidy.png)

* Cada columna una variable
* Cada fila una observación

untidy data
===========
```{r, echo=FALSE, message = FALSE, warning = FALSE,fig.width=8,fig.height=4.5,dpi=300,out.width="960px",out.height="700px"}
library(knitr)
include_graphics("UntidyONU.png")
```

untidy data
===========

```{r, echo=FALSE, message = FALSE, warning = FALSE,fig.width=8,fig.height=3,dpi=300,out.width="960px",out.height="450px"}
include_graphics("untidy.jpg")
```

untidy data
===========
class: small-code

* Tablas de contingencia
* Ejemplo data(HairEyeColor)

```{r}
data("HairEyeColor")
HairEyeColor[,,1]
```
***
### Forma tidy

```{r, echo=FALSE}
library(epitools)
library(knitr)
H <- expand.table(HairEyeColor)
kable(head(H))
```

dplyr
========================================================
incremental: true
 
* Paquete con pocas funciones [muy poderosas](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) para ordenar datos 
* Parte del [tidyverse](https://www.tidyverse.org/)

- *group_by* (agrupa datos)
- *summarize* (resume datos agrupados)
- *filter* (Encuentra filas con ciertas condiciones)
- *select* junto a *starts_with*, *ends_with* o *contains*
- *mutate* (Genera variables nuevas)
- *%>%* pipeline

summarize y group_by
=================
class: small-code
incremental: true

- *group_by* reune observaciones según una variable
- *summarize* resume una variable

```{r, eval=FALSE}
library(tidyverse)
Summary.Petal <- summarize(iris, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))
```


```{r, echo = FALSE}
library(dplyr)
library(knitr)
Summary.Petal <- summarize(iris, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))

kable(Summary.Petal)
```

summarize y group_by (continuado)
=================
class: small-code
incremental: true

```{r, eval = FALSE}
library(tidyverse)
Summary.Petal <- group_by(iris, Species)
Summary.Petal <- summarize(Summary.Petal, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))
```


```{r, echo = FALSE}
library(dplyr)
library(knitr)
Summary.Petal <- group_by(iris, Species)
Summary.Petal <- summarize(Summary.Petal, Mean.Petal.Length = mean(Petal.Length), SD.Petal.Length = sd(Petal.Length))
kable(Summary.Petal)
```

summarize y group_by (continuado)
=================
class: small-code
incremental: true

* Pueden agrupar por más de una variable a la vez

```{r, eval = FALSE}
data("mtcars")
Mtcars2 <- group_by(mtcars, am, cyl)
Consumo <- summarize(Mtcars2, Consumo_promedio = mean(mpg), desv = sd(mpg))
```


```{r, echo = FALSE}
library(dplyr)
library(knitr)
data("mtcars")
Mtcars2 <- group_by(mtcars, am, cyl)
Consumo <- summarize(Mtcars2, Consumo_promedio = mean(mpg), desv = sd(mpg))
kable(Consumo)
```


Pipeline (%>%)
=================
class: small-code
incremental: true

- Ahorra líneas, se parte con un data.frame
- Se agregan funciones de dplyr hasta llegar al resultado deseado

```{r, eval=FALSE}
library(tidyverse)
MEAN <- iris %>% group_by(Species) %>% summarize(MEAN.PETAL = mean(Petal.Length))
```


```{r, echo=FALSE}
MEAN <- iris %>% group_by(Species) %>% summarize(MEAN.PETAL = mean(Petal.Length))
kable(MEAN)
```

Pipeline (%>%) otro ejemplo
==========================

```{r, eval=FALSE}
library(tidyverse)
MEAN <- iris %>% group_by(Species) %>% summarize_all(mean)
```

```{r, echo=FALSE}
library(dplyr)
library(knitr)
MEAN <- iris %>% group_by(Species) %>% summarize_all(mean)
kable(MEAN)
```

Filter
=======
incremental:true
- Selecciona según una o más variables
```{r, echo=FALSE}
DF <- data.frame(simbolo = c(">", "<", "==", ">=", "<="), significado = c("Mayor que", "Menor que", "Igual a", "mayor o igual a", "menor o igual a"), simbolo_cont = c("!=","%in%", "is.na", "!is.na", "| &"), significado_cont = c("distinto a", "dentro del grupo", "es NA", "no es NA", "o, y"))
kable (DF)
```

Ejemplos de filter agregando a lo anterior
===============================
class: small-code

```{r, eval = FALSE}
data("iris")
DF <- iris %>% filter(Species != "versicolor") %>% group_by(Species) %>% summarise_all(mean)
```

```{r, echo = FALSE}
library(dplyr)
data("iris")
DF <- iris %>% filter(Species != "versicolor") %>% group_by(Species) %>% summarise_all(mean)
kable(DF)
```

Más de una función
===============================
class: small-code

```{r, eval = FALSE}
data("iris")
DF <- iris %>% filter(Species != "versicolor") %>% group_by(Species) %>% summarise_all(funs(mean, sd))
```

```{r, echo = FALSE}
library(dplyr)
data("iris")
DF <- iris %>% filter(Species != "versicolor") %>% group_by(Species) %>% summarise_all(funs(mean, sd))
kable(DF)
```

Select
=======================
class: small-code

* Selecciona columnas dentro de un data.frame

```{r}
data(nasa)
Nasa2 <- as.data.frame(nasa)
Temp <- Nasa2 %>% filter(year != 1995) %>% group_by(year) %>% select(contains("temp")) %>% summarize_all(mean)
```
***
```{r, echo = FALSE}
kable(Temp)
```

mutate
=======================
class: small-code

* Crea variables nuevas

```{r, eval = FALSE}
DF <- iris %>% mutate(Petal.Sepal.Ratio = Petal.Length/Sepal.Length) %>% select(Petal.Length, Sepal.Length, Petal.Sepal.Ratio, Species)
```

```{r, echo = FALSE}
library(dplyr)
data("iris")
DF <- iris %>% mutate(Petal.Sepal.Ratio = Petal.Length/Sepal.Length) %>% select(Petal.Length, Sepal.Length, Petal.Sepal.Ratio, Species)
kable(DF)
```

Ejercicios
========================================================
incremental: true

* Usando la base de datos *storm* del paquete *dplyr*, calcula la velocidad promedio y diámetro promedio (hu_diameter) de las tormentas declaradas huracanes por año
    + solución:
    + storms %>% filter(status == "hurricane") %>% select(year, wind, hu_diameter) %>% group_by(year) %>% summarize_all(mean)
    + storms %>% filter(status == "hurricane" & !is.na(hu_diameter)) %>% select(year, wind, hu_diameter) %>% group_by(year) %>% summarize_all(mean)
    + storms %>% filter(status == "hurricane") %>% select(year, wind, hu_diameter) %>% group_by(year) %>% summarize_all(funs(mean), na.rm = TRUE)

Ejercicios 2
==================================
incremental: true

* La base de datos mpg tiene datos de eficiencia vehicular en millas por galón en ciudad (*cty*) en varios vehículos, obten los datos de vehiculos del año 2004 en adelante, que sean compactos, y transforma la eficiencia  Km/litro (1 km = 1.609 millas; 1 galón = 3.78541 litros)
    + Solution <- mpg %>% filter(year > 2004 & class == "compact") %>% mutate(kpl = (cty*1.609)/3.78541)

Bases de datos con que trabajar
========================================================

- [Awesome public Datasets](https://github.com/caesar0301/awesome-public-datasets)
- [Ropensci](https://ropensci.org/packages/#data_access) en base a paquetes de R
- [cooldatasets](https://www.cooldatasets.com/)
- [Datos de FiveThirtyEight](https://github.com/fivethirtyeight/data/tree/master/)



Consejo reproducible 1
========================================================
class: small-code

Usar el paquete pacman (Package manager)

- En R usar los mismos paquetes es clave para reproducibilidad
- *p_load* cargar el paquete, si no esta instalarlo y luego cargarlo
- El código de abajo busca el paquete pacman, si no esta lo instala
- Luego usa *p_load* sobre los otros paquetes

***

```{r, echo = TRUE, eval=FALSE}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, lubridate)
```
